#!/bin/bash

# dont do anything if process is already running
if [ $(pgrep -f ${0} | wc -l) -gt 2 ]; then
    echo "[WARN] Process of ${0} is already running"
    exit
fi

loggertitle="$(basename ${0})[$$]"
FILENAME=`date +%Y%m%d%H%M%S`
DATEDIR=`date +%Y/%m/%d`
RETRYDATE=`date +%Y%m%d`
CAM=${1,,} # always lower case ($1 param)
CONFIG=$(cat /etc/rpi.json)
maindir=$(jq -r .maindir <<< $CONFIG)
TMPLOCAL="$maindir/$CAM/$DATEDIR"
SUNFILE=$(cat $maindir/sunrise-sunset-today.json)
setoffset=$(jq -r .sun.setoffset <<< $CONFIG)
riseoffset=$(jq -r .sun.riseoffset <<< $CONFIG)
jq_temp=$(jq -r .weather.jq_temp <<< $CONFIG)
jq_wind=$(jq -r .weather.jq_wind <<< $CONFIG)

if [ -z "$CAM" ]; then
    echo "ERROR: Please specify \$1 parameter (for eg. cam1)"
    exit
fi

s3bucket="s3://"$(jq -r .aws.s3 <<< $CONFIG)"/$CAM"

if [ -z "$SUNFILE" ]; then
    /etc/scripts/sunset-sunrise-today
fi

if [ ! -d $TMPLOCAL ]; then
    mkdir -v -p $TMPLOCAL
    chmod -v 777 $TMPLOCAL
fi

# in the night do not capture
# below compares numbers in HHmmss format
sunrse=`date +"%H%M%S" --date="$(jq -r .results.sunrise <<< $SUNFILE) $riseoffset"`
sunset=`date +"%H%M%S" --date="$(jq -r .results.sunset <<< $SUNFILE) $setoffset"`
NOW=$(date +"%H%M%S")

if [ $NOW -ge $sunrse ] && [ $NOW -le $sunset ]; then
    takecmd=$(jq -r .$CAM.takecmd <<< $CONFIG)
    takecmd=$(printf "$takecmd" "/tmp/$CAM-$FILENAME-1.jpg")
    logger -i -t $loggertitle "> $takecmd"
    eval $takecmd 2>&1 | logger -i -t $loggertitle

    # todo: test content. If not JPG reboot the cam
    # curl -X PUT "http://IPADDRESS/cgi-bin/api.cgi?cmd=reboot&code=0&user=username&password=password"
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        logger -i -t $loggertitle "[ERR] Failed to take image from $CAM"
    else
        sleep 3 # wait a bit

        # now annotate with temperature
        temp=$(jq -rc "$jq_temp" < $maindir/weather.json)
        wind=$(jq -rc "$jq_wind" < $maindir/weather.json)
        annotateformat=$(jq -r .$CAM.annotateformat <<< $CONFIG)
        annotateformat=$(printf "$annotateformat" "$temp" "$CAM")
        annotatecmd=$(jq -r .$CAM.annotatecmd <<< $CONFIG)
        annotatecmd=$(printf "$annotatecmd" "/tmp/$CAM-$FILENAME-1.jpg" "$annotateformat" "/tmp/$CAM-$FILENAME-2.jpg")
        logger -i -t $loggertitle "> $annotatecmd"
        eval $annotatecmd 2>&1 | logger -i -t $loggertitle

        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            # place annotated image into correct place
            mv -fv /tmp/$CAM-$FILENAME-2.jpg $TMPLOCAL/$FILENAME.jpg | logger -i -t $loggertitle
        else
            logger -i -t $loggertitle "[WARN] Annotation failed. IM convert exit code: ${PIPESTATUS[0]}"
        fi
        # remove residual tmp files
        rm -fv /tmp/$CAM-$FILENAME-*.jpg | logger -i -t $loggertitle

        # now upload to s3
        # requires S3 PutObject and PutObjectAcl permissions
        aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ \
            --acl "public-read" 2>&1 | logger -i -t $loggertitle

        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            aws s3 cp "$s3bucket/$DATEDIR/$FILENAME.jpg" "$s3bucket/current.jpg" \
                --acl "public-read" 2>&1 | logger -i -t $loggertitle
        else
            logger -i -t $loggertitle "[WARN] AWSCLI failed"
            if [ -f $TMPLOCAL/$FILENAME.jpg ]; then
                echo "aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ --acl public-read" \
                    >> $maindir/aws-s3-cp-$RETRYDATE.retry
                logger -i -t $loggertitle "[WARN] $maindir/aws-s3-cp-$RETRYDATE.retry file written"
            else
                logger -i -t $loggertitle "[WARN] File $TMPLOCAL/$FILENAME.jpg does not exist"
            fi
        fi
    fi
else
    echo "Goodnight"
fi