#!/bin/bash

# dont do anything if process is already running
if [ $(pgrep -f ${0} | wc -l) -gt 2 ]; then
    echo "[WARN] Process of ${0} is already running"
    exit
fi

FILENAME=`date +%Y%m%d%H%M%S`
DATEDIR=`date +%Y/%m/%d`
RETRYDATE=`date +%Y%m%d`
CAM=${1,,} # always lower case ($1 param)
CONFIG=$(cat /etc/rpi.json)
maindir=$(jq -r .maindir <<< $CONFIG)
TMPLOCAL="$maindir/$CAM/$DATEDIR"
SUNFILE=$(cat $maindir/sunrise-sunset-today.json)
setoffset=$(jq -r .sun.setoffset <<< $CONFIG)
riseoffset=$(jq -r .sun.riseoffset <<< $CONFIG)
jq_temp=$(jq -r .weather.jq_temp <<< $CONFIG)
jq_wind=$(jq -r .weather.jq_wind <<< $CONFIG)

if [ -z "$CAM" ]; then
    echo "ERROR: Please specify \$1 parameter. Typically this is 'cam1'"
    exit
fi
RTSP=$(jq -r .$CAM.rtsp <<< $CONFIG)
s3bucket="s3://"$(jq -r .aws.s3 <<< $CONFIG)"/$CAM"

if [ -z "$SUNFILE" ]; then
    /etc/scripts/sunset-sunrise-today
fi

if [ ! -d $TMPLOCAL ]; then
    mkdir -v -p $TMPLOCAL
    chmod -v 777 $TMPLOCAL
fi

# in the night do not capture
# below compares numbers in HHmmss format
sunrse=`date +"%H%M%S" --date="$(jq -r .results.sunrise <<< $SUNFILE) $riseoffset"`
sunset=`date +"%H%M%S" --date="$(jq -r .results.sunset <<< $SUNFILE) $setoffset"`
NOW=$(date +"%H%M%S")

if [ $NOW -ge $sunrse ] && [ $NOW -le $sunset ]; then
    ffmpeg="ffmpeg -rtsp_transport tcp -i $RTSP \
        -timeout 30 -vframes 1 -r 1 -q:v 5 $TMPLOCAL/$FILENAME.jpg"
    logger -t capture-image "> $ffmpeg"
    eval $ffmpeg 2>&1 | logger -t capture-image

    if [ ${PIPESTATUS[0]} -eq 0 ]; then
        sleep 3 # wait a bit

        # now annotate with temperature
        TEMP=$(jq -rc "$jq_temp" < $maindir/weather.json)
        convert $TMPLOCAL/$FILENAME.jpg -font Courier -pointsize 65 -gravity southwest \
            -fill white -annotate 0 $TEMP -quality 60 /tmp/$FILENAME.jpg \
            2>&1 | logger -t capture-image

        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            # replace original file with annotated one
            mv -f /tmp/$FILENAME.jpg  $TMPLOCAL/
        else
            logger -t capture-image "[WARN] Annotation failed. IM convert exit code: ${PIPESTATUS[0]}"
            rm -f /tmp/$FILENAME.jpg
        fi

        # now upload to s3
        # requires S3 PutObject and PutObjectAcl permissions
        aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ \
            --acl "public-read" 2>&1 | logger -t capture-image

        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            aws s3 cp "$s3bucket/$DATEDIR/$FILENAME.jpg" "$s3bucket/current.jpg" \
                --acl "public-read" 2>&1 | logger -t capture-image
        else
            logger -t capture-image "[WARN] AWSCLI error code: $?"
            echo "aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ --acl public-read" \
                >> $maindir/aws-s3-cp-$RETRYDATE.retry
            logger -t capture-image "[WARN] $maindir/aws-s3-cp-$RETRYDATE.retry file written"
        fi
    fi
else
    echo "Goodnight"
    /etc/scripts/create-timelapse $CAM $TMPLOCAL $maindir/aws-s3-cp-$RETRYDATE.retry
fi