#!/bin/bash

# dont do anything if process is already running
if [ $(pgrep -f ${0} | wc -l) -gt 2 ]; then
    echo "[ERR] Process of ${0} is already running"
    exit
fi

loggertitle="$(basename ${0})[$$]"

FILENAME=`date +%Y%m%d%H%M%S`
DATEDIR=`date +%Y/%m/%d`
RETRYDATE=`date +%Y%m%d`
CAM=${1,,} # always lower case ($1 param)
CONFIG=$(cat /etc/rpi.json)
maindir=$(jq -r .maindir <<< $CONFIG)
TMPLOCAL="$maindir/$CAM/$DATEDIR"

if [ ! -z "$(find $TMPLOCAL -mmin -1 -type f -name *.jpg | head -n 1)" ]; then
    echo "Image is already captured in the last minute"
    exit
fi

wwwhtml="/var/www/html"
htmlcurrent="$wwwhtml/$CAM/current"
SUNFILE=$(cat $maindir/sunrise-sunset-today.json)
setoffset=$(jq -r .sun.setoffset <<< $CONFIG)
riseoffset=$(jq -r .sun.riseoffset <<< $CONFIG)
jq_temp=$(jq -r .weather.jq_temp <<< $CONFIG)
jq_wind=$(jq -r .weather.jq_wind <<< $CONFIG)

if [ -z "$CAM" ]; then
    echo "ERROR: Please specify \$1 parameter (for eg. cam1)"
    exit
fi

s3bucket="s3://"$(jq -r .aws.s3 <<< $CONFIG)"/$CAM"
s3public=$(jq -r .aws.s3pub <<< $CONFIG)"/$CAM"

if [ -z "$SUNFILE" ]; then
    /etc/scripts/sunset-sunrise-today
fi

if [ ! -d $TMPLOCAL ]; then
    mkdir -v -p $TMPLOCAL
    chmod -v 777 $TMPLOCAL
fi

if [ ! -d $htmlcurrent ]; then
    mkdir -v -p $htmlcurrent
    chmod -v 777 $htmlcurrent
fi

# in the night do not capture
# below compares numbers in HHmmss format
sunrse=`date +"%H%M%S" --date="$(jq -r .results.sunrise <<< $SUNFILE) $riseoffset"`
sunset=`date +"%H%M%S" --date="$(jq -r .results.sunset <<< $SUNFILE) $setoffset"`
NOW=$(date +"%H%M%S")

if [ $NOW -ge $sunrse ] && [ $NOW -le $sunset ]; then
    takecmd=$(jq -r .$CAM.takecmd <<< $CONFIG)
    takecmd=$(printf "$takecmd" "/tmp/$CAM-$FILENAME-1.jpg")
    logger -t $loggertitle "> $takecmd"
    eval $takecmd 2>&1 | logger -t $loggertitle

    # If file is not JPEG reboot the cam with $rebootcmd
    if [[ ${PIPESTATUS[0]} -ne 0 ]] || [[ ! $(file -b "/tmp/$CAM-$FILENAME-1.jpg") =~ JPEG ]]; then
        logger -t $loggertitle "[ERR] $CAM failed to provide valid JPEG"
        cat /tmp/$CAM-$FILENAME-1.jpg | tail -n 20 | logger -t $loggertitle
        # reboot of cam cannot happen frequently
        if [ ! -e /tmp/$CAM.rebooted ]; then
            rebootcmd=$(jq -r .$CAM.rebootcmd <<< $CONFIG)
            logger -t $loggertitle "> $rebootcmd"
            eval $rebootcmd | jq -rc ".[0]" 2>&1 | logger -t $loggertitle
            # try once more if needed
            if [ ${PIPESTATUS[1]} -ne 0 ]; then
                sleep 10s
                eval $rebootcmd | jq -rc ".[0]" 2>&1 | logger -t $loggertitle
            fi
            touch /tmp/$CAM.rebooted
        else
            logger -t $loggertitle "[WARN] $CAM was rebooted lately, not sending another command."
        fi
        exit
    fi

    sleep 3 # wait a bit
    # now annotate with temperature
    temp=$(jq -rc "$jq_temp" < $maindir/weather.json)
    wind=$(jq -rc "$jq_wind" < $maindir/weather.json)
    camname=$(jq -r .$CAM.name <<< $CONFIG)
    annotateformat=$(jq -r .$CAM.annotateformat <<< $CONFIG)
    annotateformat=$(printf "$annotateformat" "$temp" "$CAM")
    annotatecmd=$(jq -r .$CAM.annotatecmd <<< $CONFIG)
    annotatecmd=$(printf "$annotatecmd" "/tmp/$CAM-$FILENAME-1.jpg" "$annotateformat" "/tmp/$CAM-$FILENAME-2.jpg")
    #TODO: TZ=Europe/Vilnius date --iso-8601=seconds
    #2019-03-13T19:32:57+02:00 annotate with date in this format

    logger -t $loggertitle "> $annotatecmd"
    eval $annotatecmd 2>&1 | logger -t $loggertitle

    if [ ${PIPESTATUS[0]} -eq 0 ]; then
        # place annotated image into correct place
        mv -fv /tmp/$CAM-$FILENAME-2.jpg $TMPLOCAL/$FILENAME.jpg | logger -t $loggertitle
    else
        logger -t $loggertitle "[WARN] Annotation failed. IM convert exit code: ${PIPESTATUS[0]}"
    fi
    # remove residual tmp files
    rm -fv /tmp/$CAM-$FILENAME-*.jpg | logger -t $loggertitle

    # now upload to s3
    # Note: this requires S3 PutObject and PutObjectAcl permissions
    aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ \
        --acl "public-read" 2>&1 | logger -t $loggertitle

    if [ ${PIPESTATUS[0]} -eq 0 ]; then
        redirto=$(sed "s/\//\\\\\//g" <<< "$s3public/$DATEDIR/$FILENAME.jpg")
        sedcmd="sed \"s/%s/${redirto}/g\" $wwwhtml/redirect.template.html > $htmlcurrent/index.html"
        logger -t $loggertitle "> $sedcmd"
        eval $sedcmd
    else
        logger -t $loggertitle "[ERR] AWSCLI failed. Exit code: ${PIPESTATUS[0]}"
        if [ -f $TMPLOCAL/$FILENAME.jpg ]; then
            echo "aws s3 cp $TMPLOCAL/$FILENAME.jpg $s3bucket/$DATEDIR/ --acl public-read" \
                >> $maindir/aws-s3-cp-$RETRYDATE.retry
            logger -t $loggertitle "[WARN] $maindir/aws-s3-cp-$RETRYDATE.retry file written"
        else
            logger -t $loggertitle "[ERR] File $TMPLOCAL/$FILENAME.jpg does not exist"
        fi
    fi
else
    echo "Goodnight"
fi